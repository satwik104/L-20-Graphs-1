#include <iostream>
#include <queue>
using namespace std;
/*bool hasPathBFS(int** graph, int v, int v1, int v2)
{
    bool* visited = new bool[v];
    for(int i=0; i<v; i++)
        visited[i] = false;
    
    queue<int> pendingVertex;
    pendingVertex.push(v1);
    visited[v1] = true;
    
    while(pendingVertex.size())
    {
        int a = pendingVertex.front();
        pendingVertex.pop();
        
        for(int i=0; i<v; i++)
        {
            if(!visited[i] && graph[a][i]==1)
            {
                if(i==v2)
                    return true;
               pendingVertex.push(i);
               visited[i]=true;
            }
        }
    }
    delete[] visited;
    return false;
}*/

bool hasPathDFS(int** graph, int v, bool* visited,int v1, int v2)
{
    if(graph[v1][v2]==1) 
        return true;
    visited[v1] = true;
    bool ans = false;
    for(int i=0; i<v; i++)
    {
        if(!visited[i] && graph[v1][i]==1)
            ans = hasPathDFS(graph,v,visited,i,v2);
        if(ans)//in btw if any vertex send true then we should stop the loop and return true
            return true;
    }
    return ans;//we come to this if we do not found any path
}


int main() {
    int v,e;
    cin>>v>>e;
    
    int **graph = new int*[v];
    for(int i=0; i<v; i++)
    {
        graph[i] = new int[v];
        for(int j=0; j<v; j++)
            graph[i][j] = 0;
    }
    
    int f,s;
    for(int i=0; i<e; i++)
    {
        cin>>f>>s;
        graph[f][s]=1;
        graph[s][f]=1;
    }
    
    int v1,v2;//vertices that need to be checked
    cin>>v1>>v2;
    
    if(v1==v2)
    {
        cout<<"true";
        return 0;
    }
    bool* visited = new bool[v];
    for(int i=0; i<v; i++)
        visited[i] = false;
    
    bool ans = hasPathDFS(graph,v,visited,v1,v2);
    //bool ans = hasPathBFS(graph,v,v1,v2);
    if(ans)
        cout<<"true";
    else
        cout<<"false";
    
    delete[] visited;
     for(int i = 0 ;i <v ;i++)
        delete [] graph[i];
    delete[] graph;
    return 0;
}
