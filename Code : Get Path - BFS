#include <iostream>
#include <vector>
#include<unordered_map>
#include <queue> 
using namespace std;

void getPath(int **graph, int v, bool *visited, int v1, int v2)
{
    if(v1 == v2)
    {
        cout << v1 << " ";
        return;
    }
    
    unordered_map <int,int> map;
    
    queue <int> q;
    q.push(v1);
    visited[v1] = true;
    
    while(!q.empty())
    {
        int currentIndex = q.front();
        q.pop();
        
        for(int i=0; i<v; i++)
        {
            if(graph[currentIndex][i] == 1 && !visited[i])
            {
                if(i == v2)
                {
                    cout << v2 << " ";
                    map[v2] = currentIndex;
                    
                    int j = v2;
                    while(j != v1)
                    {
                        cout << map[j] << " ";
                        j = map[j];
                    }
                    return;
                }
                
                else
                {
                    q.push(i);
                    visited[i] = true;
                    map[i] = currentIndex;
                }
            }
        }
    }
    return;
}

int main() {
     int v,e;
    cin>>v>>e;
    
    int** graph = new int*[v];
    for(int i=0; i<v; i++)
    {
        graph[i] = new int[v];
        for(int j=0; j<v; j++)
            graph[i][j] = 0;
    }
    
    int f,s;
    for(int i=0; i<e; i++)
    {
        cin>>f>>s;
        graph[f][s] = 1;
        graph[s][f] = 1;
    }
    
    int v1,v2;
    cin>>v1>>v2;
    
    bool* visited = new bool[v];
    for(int i=0; i<v; i++)
        visited[i] = false;
    
    getPath(graph,v,visited,v1,v2);
    
    delete[] visited;
    for(int i=0; i<v; i++)
        delete[] graph[i];
    delete[] graph;
    
    return 0;
}
